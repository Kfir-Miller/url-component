var app = angular.module("app", ['ngMessages']); 
var config = {
    regex:{
        zipcode: /^[1-9][0-9]{3}[\s]?[A-Za-z]{2}$/i,
        phone: /\d{8,13}/,
        website: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/,
        image: /\.(gif|jpg|jpeg|tiff|png)$/i,
        date:/^[0-9]{2}-[0-9]{2}-[0-9]{4}$/,
        year:/^[0-9]{4}$/
    },
    validateTimeout: 650, //ms
};

app.constant('config', config);
app.service("validator",["config","$timeout", 'validationService', function(config,$timeout, validationService){
        var ngModelObj;
    return {
        validateOnTimeout: function(elem,ngModel){
            var timer;
            ngModelObj = ngModel;
            elem.bind("input",function(){

                $timeout.cancel(timer);
                if(!ngModel.$timesUp){
                    timer = $timeout(function(){

                        ngModel.$setViewValue(ngModel.$viewValue);
                        if(ngModel.$dirty){
                            ngModel.$timesUp = true;
                        }
                        
                    }, config.validateTimeout);
                }
            });
        },
        validateRegex:function(regex,elem){
            return function (modelValue, viewValue) {
                if(!elem[0].attributes['required'] && validationService.isEmpty(ngModelObj.$viewValue)){
                    return true;
                }
                var value = modelValue || viewValue;
                return (regex).test(value);
            };
        }
    }
}]);
app.directive('validate', ['config','validator', function (config,validator) {
        return {
            require: 'ngModel',
            link: function (scope, elem, attr, ngModel) {
                validator.validateOnTimeout(elem,ngModel);
            }
        };
    }]);
app.directive('validatePostcode', ['config','validator', function (config,validator) {
        return {
            require: 'ngModel',
            link: function (scope, elem, attr, ngModel) {
                ngModel.$validators.postcode = validator.validateRegex(config.regex.zipcode,elem);
                validator.validateOnTimeout(elem,ngModel);
            }
        };
    }]);
app.directive('validateDate', ['config','validator', function (config,validator) {
        return {
            require: 'ngModel',
            link: function (scope, elem, attr, ngModel) {
                
                ngModel.$validators.date = validator.validateRegex(config.regex.date,elem);
                validator.validateOnTimeout(elem,ngModel);
            }
        };
    }]);
app.directive('validateYear', ['config','validator', function (config,validator) {
        return {
            require: 'ngModel',
            link: function (scope, elem, attr, ngModel) {
                
                ngModel.$validators.year = validator.validateRegex(config.regex.year,elem);
                validator.validateOnTimeout(elem,ngModel);
            }
        };
    }]);

app.directive('validateEmail',['validator', function(validator) {
    return {
        require: 'ngModel',
        link: function(scope, elem, attr, ngModel) {
                validator.validateOnTimeout(elem,ngModel);
        }
    };
}]);
app.directive('validatePhone',['config','validator', function(config,validator) {
	return {
		require: 'ngModel',
		link: function(scope, elem, attr, ngModel) {
			
			ngModel.$validators.phone=validator.validateRegex(config.regex.phone,elem);
			validator.validateOnTimeout(elem,ngModel);
		}
	};
}]);
app.directive('validateWebsite',['config','validator', function(config,validator) {
	return {
		require: 'ngModel',
		link: function(scope, elem, attr, ngModel) {
			
			ngModel.$validators.website=validator.validateRegex(config.regex.website,elem);
                        validator.validateOnTimeout(elem,ngModel);
		}
	}
}]);

app.directive('validateImage', ['config', function(config) {
	return {
		 require: 'ngModel',
	        link: function (scope, el, attrs, ngModel) {
                ngModel.$validated = false;
	        	
	            ngModel.$render = function () {
	                ngModel.$setViewValue(el.val());
	            };

	            el.bind('change', function (changeEvent) {
	                scope.$apply(function () {
	                    ngModel.$validated = true;
	                    ngModel.$render();
	                });
	                
	                var reader = new FileReader();
					reader.onload = function(loadEvent) {
						scope.$apply(function() {
							scope.fileread = changeEvent.target.files[0].name;
							
							var isValid = (config.regex.image).test(scope.fileread);
							var isGoodSize = changeEvent.target.files[0].size < (1024 * 1512);
							ngModel.$setValidity("size",isGoodSize);
							ngModel.$setValidity("image",isValid);
							
							if(isValid && isGoodSize){
								ngModel.$setViewValue({name:scope.fileread,file:loadEvent.target.result});
							}
						});
					}
					reader.readAsDataURL(changeEvent.target.files[0]);
	            });
	            
	        }
	}
}]);
app.directive("validatePasswordRepeatTo",function() {
    return {
        require: "ngModel",
        scope: {
            otherModelValue: "=validatePasswordRepeatTo"
        },
        link: function(scope, element, attributes, ngModel) {
             
            ngModel.$validators.compareTo = function(modelValue) {
                return modelValue == scope.otherModelValue;
            };
 
            scope.$watch("otherModelValue", function() {
                ngModel.$validate();
            });
        }
    };
});


app.directive('myDate',["dateFilter","$parse",function(dateFilter,$parse){
  return{
    restrict:'EAC',
    require:'?ngModel',
    link:function(scope,element,attrs,ngModel,ctrl){
      ngModel.$parsers.push(function(viewValue){
        return dateFilter(viewValue,'dd-MM-yyyy');
      });
    }
  }
}]);
app.service("validationService", [function validationService() {
        var validate = {};

        validate.isNumber = function (val) {
            return typeof val === "number";
        };

        validate.isNumeric = function (val) {
            return !isNaN(parseFloat(val));
        };

        validate.isEmptyObject = function (val) {
            for (var name in val) {
                return false;
            }
            return true;
        };

        validate.isEmptyString = function (val) {
            return val === "";
        };

        validate.isObject = function (val) {
            return (!!val) && (val.constructor === Object);
        };

        validate.isString = function (val) {
            return typeof val === "string";
        };

        validate.isUndefined = function (val) {
            if (typeof val === "undefined") {
                return true;
            }
            return false;
        };

        validate.isEmpty = function (val) {
            if (validate.isUndefined(val) || val === null) {
                return true;
            }

            if (typeof val === "boolean" || typeof val === "number") {
                return false;
            }

            if (typeof val === "string" && validate.isEmptyString(val)) {
                return true;
            }

            if (typeof val === "object" && validate.isEmptyObject(val)) {
                return true;
            }

            return false;
        };

        return validate;
    }]);
app.controller("formController", ['$scope','$http', function ($scope,$http) {
    //form data
    $scope.form = {
        answer:{
            url:""
        },
        id:40
    };
    $scope.submitForm = function(){
        if (!$scope.urlForm.$valid) {
            console.log("invalid");
            return;
        }
        $http.post("http://localhost:3000/answers/" + $scope.form.id, $scope.form).then(function (response) {
                alert("Verzonden!");
            },function(){
                alert("Er is iets fout gegaan");
            });
    }
}]);